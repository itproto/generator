const users = require('./<%=name%>-model')
const { query, param, validationResult, checkSchema, check } = require('express-validator')

const controller = {
  gets: [
    query('from')
    .optional(true)
    .isNumeric(),
    (req, res) => {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        return res.status(400).send(errors)
      }
      const { from, to } = req.query
      res.json(users.list(from, to))
    }
  ],
  got: [
    param('id').isAlphanumeric().withMessage('Alphanumeric')
    .trim().escape() //toBoolean() sanitize
    .isLength({ max: 12, min: 12 }).withMessage('Must be 12'), (req, res) => {
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).send(errors)
    }
    const { id } = req.params
    const user = users.get(req.params.id)
    if (!user) {
      return res.status(400).send(`User ${id} not found`)
    }
    res.json(user)
  }],

  post: [checkSchema({
    name: {
      isLength: {
        errorMessage: 'Must be ok',
        options: { min: 3 }
      }
    }

  }),
  (req, res) => {
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).send(errors)
    }
    res.json(users.create(req.body))
  }
  ],

  put: [(req, res) => {
    const { id } = req.params
    res.json(users.update(id, req.body))
  }
  ],

  del: [(req, res) => {
    const { id } = req.params
    res.json(users.del(id))
  }
  ]
}

<%if(args.cors){%>
const whitelist = ['*', 'http://itpr.com']
const complexCors = {
  origin: (origin, cb) => {
    Promise.resolve(whitelist).then(origins => cb(null, origins))
  },
  methods: ['POST'],
  credentials: true,
  maxAge: 3600
}
const defaultCors = {
  'origin': '*',
  'methods': 'GET,HEAD,PUT,PATCH,POST,DELETE',
  'preflightContinue': false,
  'optionsSuccessStatus': 204
}
<%}%>

module.exports = require('express').Router()
// TODO: Sort paging users?sort=-age,+salary&page=1&totalPages=10
  .get('/', controller.gets)
  .post('/', controller.post)
  .get('/:id', controller.got)
  .put('/:id', controller.put)
  .delete('/:id', controller.del)
<%if(args.cors){%>
  .get('/simple-corse', require('cors')(), (req, res) => res.send(defaultCors))
  .get('/complex-corse', require('cors')(complexCors), controller.gets)
  .get('/cached', require('apicache')('5 minutes'), controller.gets)
  .use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    // authorized headers for preflight requests
    // https://developer.mozilla.org/en-US/docs/Glossary/preflight_request
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
    next();
    app.options('*', (req, res) => {
        // allowed XHR methods
        res.header('Access-Control-Allow-Methods', 'GET, PATCH, PUT, POST, DELETE, OPTIONS');
        res.send();
    });
});
<%}%>
